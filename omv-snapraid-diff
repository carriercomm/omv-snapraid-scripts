#!/bin/bash
#######################################################################
# this is a helper script that keeps snapraid parity info in sync with
# your data. Here's how it works:
#   1) it first calls diff to figure out if the parity info is out of sync
#   2) if there are changed files (i.e. new, changed, moved or removed),
#         it then checks how many files were removed.
#   3) if the deleted files exceed X (configurable), it triggers an
#         alert email and stops. (in case of accidental deletions)
#   4) otherwise, it will call sync.
#   5) when sync finishes, it sends an email with the output to user.
#
# code from:
# Original-Author: sidney
# Author Zack Reed
# http://zackreed.me/articles/83-updated-snapraid-sync-script
# HeadURL: file:///svnrepo/linuxScripts/snapraid_diff_n_sync.sh $
# Modified Wouter Dullaert http://soundhacker.be
# ^^Last Update Date 2014-08-24
# changed for OMV:
# Solo0815: http://forums.openmediavault.org/index.php/User/156-Solo0815/
#
# ToDo:
# - write sed file from config
# - check omv tmp-dir
# - check for mail and PW in config.xml
# - create HTML-Output
# - switch to automatically do a sync after X days if nothing happens
#
#######################################################################

# Logging Settings
SYSLOG="true"            # activate write to syslog (default="true")
VERBOSE="false"            # use the verbose mode, with additional info on the command line (default="false")
LOGGER="/usr/bin/logger"   # path and name of logger (default="/usr/bin/logger")
FACILITY="local5"         # facility to log to -> see syslog.conf  and add the line (default="local6")
						# "local6.* %/var/log/autoshutdown.log"
DEBUG="false"

SENDMAIL="true"

############################
# Scrub Settings
# # Set to true if you want to scrub after a successful sync
RUN_SCRUB="false"
SCRUB_FREQUENCY_IN_DAYS=7

############################
# Mail settings:
# get basic info
. /etc/default/openmediavault

# needed for omv_config_get command
. /usr/share/openmediavault/scripts/helper-functions

#primary and secondary recipients
OMV_MAIL_primarymail=$(omv_config_get "//system/email/primaryemail")
OMV_MAIL_secondarymail=$(omv_config_get "//system/email/secondaryemail")
if $DEBUG; then 
	echo "OMV_MAIL_primarymail $OMV_MAIL_primarymail"
	echo "OMV_MAIL_secondarymail $OMV_MAIL_secondarymail"
fi

# structure in /etc/openmediavault/config.xml

#    <email>
#      <enable>1</enable>
#      <server>mail.ryecoinc.com</server>
#      <port>25</port>
#      <tls>0</tls>
#      <sender>server@ryecoinc.com</sender>
#      <authentication>
#        <enable>0</enable>
#        <username></username>
#        <password></password>
#      </authentication>
#      <primaryemail>aaron@ryecoinc.net</primaryemail>
#      <secondaryemail></secondaryemail>
#    </email>

#EMAIL_SUBJECT_PREFIX="[${OMV_MAIL_sender}] SnapRAID"

################################################################
#####     Functions
################################################################

################################################################
#
#   name:	_send_email
#   parameter : 	# $1 = Subject
					# $2 = file with mailtext
					# Optional:
					# $3 = Who sent this message (full name), e.g. "Server Status-Report"
					# $4 = Answer to this adress
#   return: 	0 = All OK
#				1 = Error happend
#
_send_email(){

## the below does not work with the internal OMV-Settings
#	mail -s "$1" -a 'Content-Type: text/plain; charset=utf-8' $MAIL -- -F "$3" -f "$4" < $2

if [ $SENDMAIL = "false" ]; then
	_log "INFO: Mail should be sent here - SENDMAIL set to false"
	echo "Mail should be sent here - SENDMAIL set to false"
	return 0
fi

#mail [-a header] [-b bcc-addr] [-c cc-addr] [-s subject] to-addr
mail -c "$OMV_MAIL_secondarymail" -s "$1" "$OMV_MAIL_primarymail" < $2

	if [ $? -eq 0 ]; then
		_log "INFO: Full statusreport sent to '$MAIL'"
		return 0
	else
		_log "WARN: Mail with full statusreport not be sent. There was an error. Please have a look at /var/log/mail.log"
		return 1
	fi
}

################################################################
#
#   name      : _log
#   parameter   : $LOGMESSAGE : logmessage in format "PRIORITY: MESSAGE"
#   return      : none
#
_log() {
	echo "\$\*: $*"
       [[ "$*" =~ ^([A-Za-z]*):(.*) ]] &&
         {
            PRIORITY=${BASH_REMATCH[1]} # INFO, DEBUG, WARN
            LOGMESSAGE=${BASH_REMATCH[2]} # the Log-Message
            [[ "$(basename "$0")" =~ ^(.*) ]] && {
            LOGMESSAGE="${BASH_REMATCH[1]}[$$]: $PRIORITY: '$LOGMESSAGE'";
            }
         }

      if $VERBOSE ; then
		#echo "VERBOSE:"
         # next line only with implementation where logger does not support option '-s'
         # echo "$(date '+%b %e %H:%M:%S'):$LOGMESSAGE"
         [ $SYSLOG ] && $LOGGER -s -t "$(date '+%b %e %H:%M:%S'): $USER" -p $FACILITY.$PRIORITY "$LOGMESSAGE"
      else
         [ $SYSLOG ] && $LOGGER -t "$USER" -p $FACILITY.$PRIORITY "$LOGMESSAGE"
      fi   # > if [ "$VERBOSE" = "NO" ]; then
}

################################################################
#
#   name      : _rmtmp
#   parameter   : none
#   return      : none
#
# removes $TMP_OUTPUT
_rmtmp() {
	rm $TMP_OUTPUT >/dev/null 2>&1
}

################################################################
#
#   name      : _check_success
#   parameter   : none
#   return      : 0 = last command was successful
#				: 1 = last command ended with an error -> [ $? -gt 1 ]
#
_check_success() {
	if [ $? = 0 ]; then
		return 0
	else
		return 1
	fi
}

################################################################
#
#   name      : _add_mail_header
#   parameter   : none
#
# adds mail tex
#
_add_mail_header() {
	cat > $TMP_OUTPUT <<EOF
SnapRAID Script - Version: $SCRIPTVERSION
running SnapRAID $SNAPRAIDVERSION
---------------------------------------------
SnapRAID Job started - $(date)
Warnings about 'Ignoring mount point' are possibly due to AUFS or mhddfs-Pooling in OMV
SnapRAID DIFF started - $(date)
EOF
}

################################################################
#####     MAIN BODY of the script
################################################################

SCRIPTVERSION="0.6.6"

# Set path to snapraid.conf
SNAPRAIDCONF="/etc/snapraid.conf"

# Define threshold of files deleted to start the sync-process
# default = 0 to make sure no sync process is started while testing
DEL_THRESHOLD=0

# read CONTENT and PARITY from $SNAPRAIDCONF
OMV_CONTENT_FILES="$(egrep '^content /media/' $SNAPRAIDCONF | awk '{print $2}')"
PARITY_FILE="$(egrep '^parity /' $SNAPRAIDCONF | awk '{print $2}')"

## INTERNAL TEMP VARS ##
TMP_OUTPUT="/tmp/snapraid.out"

if $DEBUG; then
	_log "DEBUG: OMV_CONTENT_FILES: $OMV_CONTENT_FILES"
	_log "DEBUG: PARITY_FILE: $PARITY_FILE"
	_log "DEBUG: TMP_OUTPUT: $TMP_OUTPUT"
fi

SNAPRAID_BIN="$(which snapraid)"
if [ -z $SNAPRAID_BIN ]; then
	_log "WARN: snapraid executable not found!"
fi
if [ ! -x $SNAPRAID_BIN ]; then
	_log "WARN: snapraid not executable! Please do a 'chmod +x snapraid'"
fi

SNAPRAIDVERSION="$(${SNAPRAID_BIN} -V | sed 's/snapraid v//g')"

if [ -f $TMP_OUTPUT ]; then
	rm $TMP_OUTPUT && _log "INFO: '$TMP_OUTPUT' deleted - creating a new one"
fi

#sanity check first to make sure we can access the content and parity files
CONTENT_FILES_COUNTER=0

# check, if at least one content file is found
for SINGLE_CONTENT_FILE in $OMV_CONTENT_FILES; do

	if $DEBUG; then _log "DEBUG: found: SINGLE_CONTENT_FILE: $SINGLE_CONTENT_FILE"; fi

	if [ -e $SINGLE_CONTENT_FILE ]; then
		let CONTENT_FILES_COUNTER++
		continue
	else
		_log "WARN: Content file ($SINGLE_CONTENT_FILE) not found!"
	fi
done
if [ $CONTENT_FILES_COUNTER -eq 0 ]; then
	_log "WARN: No Content files found! Exiting ..."
	exit 1
fi

if [ -e $PARITY_FILE ]; then
	if $DEBUG; then _log "DEBUG: found: PARITY_FILE: $PARITY_FILE"; fi
else
  _log "WARN: Parity file ($PARITY_FILE) not found!"
  exit 1
fi

#   ### Section to support SnapRAID Scrub ###
# mkdir -p /root/.snapraid/
# 
# if [ -f /root/.snapraid/snapraid_scrub_counter ]; then
# 	COUNTER=$(cat /root/.snapraid/snapraid_scrub_counter)
# else
# 	echo "1" > /root/.snapraid/snapraid_scrub_counter
# 	COUNTER=1
# fi
# enable only one of the two below!!!
# let COUNTER++
# COUNTER=$(($COUNTER+0))
# ### End Scrub Section ###

################################################################
## Start of the script
_log "INFO: ----------------------------------------"
_log "INFO: SnapRAID Job started - Script-version: $SCRIPTVERSION"
_log "INFO: SnapRAID-Version: $SNAPRAIDVERSION"

################################################################
# start snapraid DIFF command
_log "INFO: SnapRAID DIFF started"
_add_mail_header # all info above is in that function

# run diff: 
# output: stdout: WARNINGS only (filtering 'Ignoring mount point') and $TMP_OUTPUT (all WARNINGS)
$SNAPRAID_BIN diff 2>&1 | tee -a $TMP_OUTPUT | grep WARNING | grep -v 'WARNING! Ignoring mount point' | while read line; do
	_log "WARN: $line"
done

# wait for the above cmd to finish
wait

_log "INFO: SnapRAID DIFF finished"
_log "INFO: ----------------------------------------"
echo "SnapRAID DIFF finished - $(date)" >> $TMP_OUTPUT
echo "----------------------------------------" >> $TMP_OUTPUT

# read the values of deleted, added, etc. files since the last sync
DEL_COUNT=$(grep -w '^ \{1,\}[0-9]* removed$' $TMP_OUTPUT | sed 's/^ *//g' | cut -d ' ' -f1)
ADD_COUNT=$(grep -w '^ \{1,\}[0-9]* added$' $TMP_OUTPUT | sed 's/^ *//g' | cut -d ' ' -f1)
MOVE_COUNT=$(grep -w '^ \{1,\}[0-9]* moved$' $TMP_OUTPUT | sed 's/^ *//g' | cut -d ' ' -f1)
COPY_COUNT=$(grep -w '^ \{1,\}[0-9]* copied$' $TMP_OUTPUT | sed 's/^ *//g' | cut -d ' ' -f1)
UPDATE_COUNT=$(grep -w '^ \{1,\}[0-9]* updated$' $TMP_OUTPUT | sed 's/^ *//g' | cut -d ' ' -f1)

_log "INFO: SUMMARY of changes since last sync - Added: [$ADD_COUNT] - Deleted: [$DEL_COUNT] - Moved: [$MOVE_COUNT] - Copied: [$COPY_COUNT] - Updated: [$UPDATE_COUNT]"

# check if files have changed
if [ $DEL_COUNT -gt 0 -o $ADD_COUNT -gt 0 -o $MOVE_COUNT -gt 0 -o $COPY_COUNT -gt 0 -o $UPDATE_COUNT -gt 0 ]; then

    # YES, check if number of deleted files exceed DEL_THRESHOLD
    if [ $DEL_COUNT -gt $DEL_THRESHOLD ]; then
    
        # YES, lets inform user and not proceed with the sync just in case
        _log "INFO: Number of deleted files ($DEL_COUNT) exceeded threshold ($DEL_THRESHOLD). NOT proceeding with sync job."
        _log "INFO: Please run sync manually if this is not an error condition."
		echo "Number of deleted files ($DEL_COUNT) exceeded threshold ($DEL_THRESHOLD). NOT proceeding with sync job." >> $TMP_OUTPUT
		echo "Please run sync manually if this is not an error condition" >> $TMP_OUTPUT
		echo >> $TMP_OUTPUT
		echo "Yours, SnapRAID script" >> $TMP_OUTPUT

		_send_email "SnapRAID - WARNING - Number of deleted files (${DEL_COUNT}) exceeded threshold (${DEL_THRESHOLD})" "${TMP_OUTPUT}" "${EMAIL_SUBJECT_PREFIX}" "${OMV_MAIL_sender}"
    else

        # NO, delete threshold not reached, lets run the sync job
        _log "INFO: Changes detected [A-$ADD_COUNT,D-$DEL_COUNT,M-$MOVE_COUNT,C-$COPY_COUNT,U-$UPDATE_COUNT] -> deleted files ($DEL_COUNT) is below threshold ($DEL_THRESHOLD). Running SYNC Command."
		echo "Changes detected [A-$ADD_COUNT,D-$DEL_COUNT,M-$MOVE_COUNT,C-$COPY_COUNT,U-$UPDATE_COUNT] -> deleted files ($DEL_COUNT) is below threshold ($DEL_THRESHOLD). Running SYNC Command" >> $TMP_OUTPUT

# _log "INFO: Script exits here for debugging!"
# exit 0	
		# start snapraid SYNC command
        _log "INFO: SnapRAID SYNC Job started"
        _log "INFO: ----------------------------------------"
		echo "SnapRAID SYNC Job started - $(date)" >> $TMP_OUTPUT
		echo "----------------------------------------" >> $TMP_OUTPUT

        $SNAPRAID_BIN sync >> $TMP_OUTPUT
        #wait for the job to finish
        wait

        _log "INFO: ----------------------------------------"
        _log "INFO: SnapRAID SYNC Job finished"
		echo "SnapRAID SYNC Job finished - $(date)" >> $TMP_OUTPUT
		echo "----------------------------------------" >> $TMP_OUTPUT

        _send_email "$EMAIL_SUBJECT_PREFIX - Sync Job COMPLETED" "${TMP_OUTPUT}" "${EMAIL_SUBJECT_PREFIX}" "${OMV_MAIL_sender}"
        _check_success && _rmtmp

		##############################
#         # start snapraid SCRUB
#         if [ $RUN_SCRUB = "true" ]; then
#             if [ $COUNTER -lt $SCRUB_FREQUENCY_IN_DAYS ]; then
#				echo "SnapRAID SCRUB-Cycle count not met.  No scrub was run." - $(date)" >> $TMP_OUTPUT
#                COUNTER=$[$COUNTER + 1]
#                echo "$COUNTER" > /root/.snapraid/snapraid_scrub_counter
#             else
#				echo "SnapRAID SCRUB Job started. This will take a while - $(date)" >> $TMP_OUTPUT
#                $SNAPRAID_BIN scrub -p 100 -o 0 >> $TMP_OUTPUT

				#wait for the job to finish
#				wait

#                # Reset counter
#                echo "1" > /root/.snapraid/snapraid_scrub_counter

#				_send_email "SnapRAID - Full Scrub COMPLETED" "${TMP_OUTPUT}" "${EMAIL_SUBJECT_PREFIX}" "${OMV_MAIL_sender}"
#				_check_success && _rmtmp

#             fi
#         else
#                echo "Array scrubbing is not enabled.  If you would like to enable it, please set the RUN_SCRUB option to true."
#         fi
    fi
else
    # NO, so lets log it and exit
    _log "INFO: No change detected. Nothing to do"
fi

_log "INFO: SnapRAID Job ended."
_rmtmp
exit 0
